<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浅析k近邻算法]]></title>
      <url>http://puppetkant.cn/2018/04/21/%E6%B5%85%E6%9E%90k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>数据挖掘十大算法之k近邻算法。(持续更新中，<del>等我把公式打上去</del>)</p>
<a id="more"></a>
<h2 id="k近邻简述"><a href="#k近邻简述" class="headerlink" title="k近邻简述"></a>k近邻简述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>简单地说，k近邻算法采用测量不同特征值之间的距离的方法进行预测。</p>
<h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p>给定测试样本，基于某种距离量度找出训练集中与其最靠近的k个训练样本，然后基于这k个“邻居”的信息来进行预测。<del>（近朱者赤，近墨者黑）</del></p>
<h3 id="懒惰学习"><a href="#懒惰学习" class="headerlink" title="懒惰学习"></a>懒惰学习</h3><p>k近邻学习是没有显式的训练过程。它是“懒惰学习”（lazy learning）的著名代表，此类学习技术在训练阶段仅仅是把样本保存起来，训练时间开销为零，待收到测试样本后再进行处理；相应的，那些在训练阶段就对样本进行学习处理的方法，称为“急切学习”（eager learning）。</p>
<h3 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h3><p><img src="http://omjz7so35.bkt.clouddn.com/279px-KnnClassification.svg.png" alt=""></p>
<p>k近邻算法例子。测试样本（绿色圆形）应归入要么是第一类的蓝色方形或是第二类的红色三角形。如果k=3（实线圆圈）它被分配给第二类，因为有2个三角形和只有1个正方形在内侧圆圈之内。如果k=5（虚线圆圈）它被分配到第一类（3个正方形与2个三角形在外侧圆圈之内）。</p>
<h2 id="k近邻模型"><a href="#k近邻模型" class="headerlink" title="k近邻模型"></a>k近邻模型</h2><p>k值的选择，距离度量及分类决策规则是k近邻法的三个基本要素。</p>
<h3 id="距离度量-L-p-距离"><a href="#距离度量-L-p-距离" class="headerlink" title="距离度量:$L_{p}$距离"></a>距离度量:$L_{p}$距离</h3><p>设特征空间向量$\chi$是n维实数向量空间$R^{n}$，$x<em>{i},x</em>{j}\in \chi$，$\begin{aligned}\cdot \ x<em>{i}=\left(x^{\left( 1\right) }</em>{i,}x^{\left( 2\right) }<em>{i},\ldots x^{\left( n\right) }</em>{i}\right)^{T}\end{aligned}$,$\begin{aligned}\cdot \ x<em>{j}=\left(x^{\left( 1\right) }</em>{j,}x^{\left( 2\right) }<em>{j},\ldots x^{\left( n\right) }</em>{j}\right)^{T}\end{aligned}$。$$$$$$$$$$$$$</p>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[假装很开心]]></title>
      <url>http://puppetkant.cn/2018/01/01/%E5%81%87%E8%A3%85%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<p>现在开始写年终总结应该不算晚吧，17年的最后一天和18年的第一天本质上也就只有日期不同了吧，就如同周日和周一一样。虽然今年没有什么值得夸耀的事情，但是还是要记录一下，就像是照片一样，不是为了彰显而是为了存在。<br><a id="more"></a></p>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p>先说一下17年定下的目标吧，准确来说除了博客有记得更，其他好像毫无建树。满意的项目自然是没有，倒不是什么严于律己，而是确实没有码过什么有趣的项目。当初超级喜欢即刻，随着越办越好也渐渐背离了初衷，为此学习的爬虫<del>因为蠢</del>也没有找到实习。绘画也是三分钟热度，并没有坚持下去，不过还是喜欢画画，虽然没什么卵用。健身也被荒废了，体重的话都是有过一些增长，不过距离120还是遥遥无期。至于阅读，前半年还是蛮好的，不过后半年就没怎么读书了，到现在为止大概看了40+本，并不是什么值得称赞的事情。</p>
<p>回首发现，真是一片昏暗的人生啊，不过就算如此，还是有一点点的彩色的。</p>
<ul>
<li>发现了一个超级好听的组合<a href="http://www.reol.jp/" target="_blank" rel="external">REOL</a>，然而刚发现就解散了(;´༎ຶД༎ຶ`) <del>好像这比单纯的昏暗还要让人难过</del></li>
<li>喜欢上了炉石传说和克苏鲁的呼唤<del>仔细想想好像更昏暗了</del></li>
<li>年末和朋友一起出去玩<del>人生追求已经差劲到这种地步了</del></li>
</ul>
<p>啊啊啊啊啊啊啊啊啊啊，太可怕了，真的是昏暗啊【</p>
<h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p>好吧，哪怕2017再昏暗日子还是要过下去的，如果人生就这样结束我是不会接受的。</p>
<blockquote>
<p>可悲的你究竟要活到什么时候？</p>
<p>直到我庞大的未来，将我庞大的过去粉碎为止。</p>
</blockquote>
<p>那么来历数一下接下来要做些什么吧，卑微的怪物还在奢求着什么。</p>
<ul>
<li>毕设答辩</li>
</ul>
<p>好吧，这是接下来要做的事情，也算是自己大学生涯的最后一场考试吧，优秀与否并不重要，但是缺席和失败是不能容忍的。</p>
<ul>
<li>驾驶考试</li>
</ul>
<p>是从什么时候开始的呢，好像已经很久了，是时候画上休止符了。<del>毕竟有了足够的时间</del></p>
<ul>
<li>工作实习</li>
</ul>
<p>何以解忧，唯有暴富。</p>
<ul>
<li>正式毕业</li>
</ul>
<p>这件事好像并不需要刻意去做，就像涨潮一样，十分自然，哪怕不想离开这个学校好像也不得不离开，那么希望到时候自己可以笑着去说再见。</p>
<ul>
<li>未完待续</li>
</ul>
<p>好像这只是半年内的事情，而且并不是什么远大的梦想，甚至愿望的程度都比不过“找女朋友”之类的，但是很实际不是么。关于未来，我无数次得给自己画饼，然而只是用来充饥，并没有去做。不断地被人期待然后又去辜负他人的期待，想要去跟上别人的脚步却伫立在原地，很失败不是么？但是，这就是真实的我啊，因为害怕而远离，由于懦弱而逃避，哪怕这样也依旧有努力活下去的理由啊。</p>
<blockquote>
<p>Someday I’ll be just like you. </p>
</blockquote>
<p>未知令人着迷，而未来更是令人充满希冀，明天会是鲜花遍地还是荆棘丛生呢？还是重复着一成不变呢？真是想想就开心呐，赞美明天。</p>
<p>新年&amp;元旦快乐。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《think_python》读书笔记]]></title>
      <url>http://puppetkant.cn/2017/12/05/%E3%80%8Athink-python%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>最近在图书馆发现了一本书《Think Python:How to Think Like a Computer Scientist》，看起来还不错的样子，于是就拿来看了，是一本蛮适合入门Python的书，还能查漏补缺，个人还是蛮推荐的。可以尝试看完廖雪峰的python教程然后看这本。<br><a id="more"></a></p>
<h2 id="程序之道"><a href="#程序之道" class="headerlink" title="程序之道"></a>程序之道</h2><ul>
<li>操作符**表示进行指数运算。<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">6</span>**<span class="number">2</span>+<span class="number">6</span></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在其他一些语言中，指数操作用^符号表示，但在Python中^已经被用来表示二进制按位运算XOR了。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">6</span>^<span class="number">2</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure></p>
<h2 id="变量、表达式和语句"><a href="#变量、表达式和语句" class="headerlink" title="变量、表达式和语句"></a>变量、表达式和语句</h2><ul>
<li>一般来说，字符串不能进行数学操作，但*和+例外。</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>单引号和双引号的作用相同。大部分情况下人们都使用单引号。</li>
<li>函数定义必须在函数被调用之前先运行。</li>
</ul>
<h2 id="案例研究：接口设计"><a href="#案例研究：接口设计" class="headerlink" title="案例研究：接口设计"></a>案例研究：接口设计</h2><ul>
<li>封装：将一组语句转换成函数定义的过程。</li>
<li>泛化：将一些不必要的具体值替换为合适的通用参数式变量的过程。</li>
<li>重构：修改代码并改善函数的接口以及代码质量的过程。</li>
</ul>
<h2 id="条件和递归"><a href="#条件和递归" class="headerlink" title="条件和递归"></a>条件和递归</h2><ul>
<li>递归：在当前函数调用自己的进程。</li>
</ul>
<h2 id="有返回值的函数"><a href="#有返回值的函数" class="headerlink" title="有返回值的函数"></a>有返回值的函数</h2><ul>
<li>增量开发：一个程序开发计划，通过每次只增加少量代码并加以测试的步骤来减少调试。</li>
</ul>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><ul>
<li>迭代：使用递归函数调用或循环来重复执行一段语句。</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>切片</li>
<li>字符串是不可变的，也就是说，不能修改一个已存在的字符串，最多新建一个字符串。</li>
</ul>
<h2 id="案例分析：文字游戏"><a href="#案例分析：文字游戏" class="headerlink" title="案例分析：文字游戏"></a>案例分析：文字游戏</h2><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li><p>当一个对象有多个引用，并且引用不同的名程时，我们说这个对象有别名。如果有别名的对象是可变的，则对一个别名的修改会影响另一个。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="selector-tag">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&gt;&gt;&gt;b=a</div><div class="line">&gt;&gt;&gt;<span class="selector-tag">b</span> is a</div><div class="line">True</div><div class="line">&gt;&gt;&gt;<span class="selector-tag">b</span>[<span class="number">0</span>]=<span class="number">3</span></div><div class="line">&gt;&gt;&gt;a</div><div class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>通过复制来避免别名</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">t</span>=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line"><span class="attr">t2</span> = t[:]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul>
<li>zip是一个内置函数，接收两个或多个序列并返回一个元组序列。</li>
<li>字典有items方法返回一个元组序列，每个元组是一个键值对。反之，可以用一个元组列表来初始化一个新字典，dict()。</li>
</ul>
<h2 id="案例研究：选择数据结构"><a href="#案例研究：选择数据结构" class="headerlink" title="案例研究：选择数据结构"></a>案例研究：选择数据结构</h2><ul>
<li>伪随机：看起来是随机的，但实际上是由带着确定性的程序生成的一序列数。</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h2 id="类和函数"><a href="#类和函数" class="headerlink" title="类和函数"></a>类和函数</h2><ul>
<li>纯函数：不修改任何形参对象的函数。大部分纯函数都有返回值。</li>
<li>修改器：修改一个或多个形参对象的函数。大部分修改器都没有返回值，也就是返回None。</li>
<li>总的来说，推荐只要合理的时候都尽量编写纯函数，而只有在具有绝对说服力的时候使用修改器。这种方法可以称作函数式编程风格。</li>
</ul>
<h2 id="类和方法"><a href="#类和方法" class="headerlink" title="类和方法"></a>类和方法</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="Python拾珍"><a href="#Python拾珍" class="headerlink" title="Python拾珍"></a>Python拾珍</h2><ul>
<li>收集关键词参数</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def <span class="builtin-name">print</span>(<span class="number">*a</span>rgs):</div><div class="line">    <span class="builtin-name">print</span>(args)</div></pre></td></tr></table></figure>
<p>星号操作符并不会收集关键词实参，要收集关键词实参，采用**操作符：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printall</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    print(args+kwargs)</div></pre></td></tr></table></figure></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2>]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[目标爬虫清单]]></title>
      <url>http://puppetkant.cn/2017/10/26/%E7%9B%AE%E6%A0%87%E7%88%AC%E8%99%AB%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>想了想决定，把想要爬的网站都汇总起来，一方面是这样更方便清晰，另一方面也是督促自己每天都编程。</p>
<p>完成后会顺带写上关键点和一些心得。</p>
<p><em>先定个小目标，爬他100个</em><br><a id="more"></a></p>
<h2 id="网易云音乐的音乐"><a href="#网易云音乐的音乐" class="headerlink" title="网易云音乐的音乐"></a>网易云音乐的音乐</h2><h2 id="花瓣采集的图片"><a href="#花瓣采集的图片" class="headerlink" title="花瓣采集的图片"></a>花瓣采集的图片</h2><h2 id="instagram的图片"><a href="#instagram的图片" class="headerlink" title="instagram的图片"></a>instagram的图片</h2><h3 id="直接爬取"><a href="#直接爬取" class="headerlink" title="直接爬取"></a>直接爬取</h3><p>最简单的爬取方式大概就是直接爬取了，单纯使用request方法就可以拿到目标信息，不需要添加头文件也不需要进行模拟登录，甚至动态加载的部分都可以通过instagram的更多的herf进行跳转从而避开抓包步骤。但是考虑到效率问题，只适用于较少链接的爬取，发帖数应当少于200。</p>
<p><a href="https://github.com/PuppetSama/InstagramSpider/blob/master/directIns.py" target="_blank" rel="external">示例代码</a></p>
<h2 id="维基百科编辑ip分布地图"><a href="#维基百科编辑ip分布地图" class="headerlink" title="维基百科编辑ip分布地图"></a>维基百科编辑ip分布地图</h2><h2 id="微博情绪地图"><a href="#微博情绪地图" class="headerlink" title="微博情绪地图"></a>微博情绪地图</h2><h2 id="拉勾网实习搜索"><a href="#拉勾网实习搜索" class="headerlink" title="拉勾网实习搜索"></a>拉勾网实习搜索</h2><h2 id="matplotlib示例代码下载"><a href="#matplotlib示例代码下载" class="headerlink" title="matplotlib示例代码下载"></a>matplotlib示例代码下载</h2><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>采用scrapy框架可以快速下载，使用FilesPipeline(可以看作是特殊的下载器，通过item的一个特殊字段将目标文件的url传递给它，就可以自动下载，并将下载结果信息存入item的另一个字段，方便查阅)。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><strong>FilesPipeline</strong></th>
<th><strong>ImagesPipeline</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>导入路径</td>
<td>scrapy.pipelines.files.FilesPipeline</td>
<td>secrapy.pipeline.images.ImagesPipeline</td>
</tr>
<tr>
<td>Item字段</td>
<td>file_urls,files</td>
<td>image_urls,images</td>
</tr>
<tr>
<td>下载目录</td>
<td>FILE_STORE</td>
<td>IMAGES_STORE</td>
</tr>
</tbody>
</table>
</div>
<h3 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h3><ul>
<li>使用scrapy shell来下载目标界面,然后调用view函数在浏览器查看。</li>
<li>发现例子页面链接，使用LinkExtractor提取所有例子页面链接。</li>
<li>分析例子页面，使用fetch函数进入下载第一个例子页面，调用view函数查看。</li>
<li>分析下载地址，完成。</li>
</ul>
<h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><ul>
<li>创建Scrapy项目。</li>
<li>在配置文件启用FilesPipeline，指定下载目录。</li>
<li>实现Item。</li>
<li>实现Spider。</li>
</ul>
<p>下载完成后，发现文件名为一串数字，这些数字是下载文件url的sha1散列值。这种命名方式可以防止重名文件相互覆盖，但并不直观。</p>
<p>实现一个FilesPipeline的子类，覆写file_path方法来实现期望的文件命名规则。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">from</span> scrapy.pipelines.files <span class="keyword">import</span> FilesPipeline</div><div class="line"><span class="title">from</span> urllib.parse <span class="keyword">import</span> urlparse</div><div class="line"><span class="title">from</span> os.path <span class="keyword">import</span> basename, dirname, join</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">MatpoltlibexamplePipeline</span>(<span class="type">FilesPipeline</span>):</span></div><div class="line"><span class="class">    def file_path(<span class="title">self</span>, <span class="title">request</span>, <span class="title">response</span>=<span class="type">None</span>, <span class="title">info</span>=<span class="type">None</span>):</span></div><div class="line"><span class="class">    	path=urlparse(<span class="title">request</span>.<span class="title">url</span>).path</span></div><div class="line"><span class="class">    	return join(<span class="title">basename</span>(<span class="title">dirname</span>(<span class="title">path</span>)), basename(<span class="title">path</span>))</span></div></pre></td></tr></table></figure>
<h2 id="杭电图书馆图书"><a href="#杭电图书馆图书" class="headerlink" title="杭电图书馆图书"></a>杭电图书馆图书</h2><h2 id="豆瓣阅读热门标签"><a href="#豆瓣阅读热门标签" class="headerlink" title="豆瓣阅读热门标签"></a>豆瓣阅读热门标签</h2><h3 id="项目说明-1"><a href="#项目说明-1" class="headerlink" title="项目说明"></a>项目说明</h3><p>爬取<a href="https://book.douban.com/tag/?view=cloud" target="_blank" rel="external">豆瓣阅读所有热门标签</a>下的书籍名称，评分和评价人数。</p>
<p>这个项目的起因是有朋友需要对豆瓣阅读的信息进行数据挖掘，刚好自己没什么事情就随手写了，具体实现并不困难。</p>
<h3 id="值得学习"><a href="#值得学习" class="headerlink" title="值得学习"></a>值得学习</h3><h4 id="utf8格式存储json"><a href="#utf8格式存储json" class="headerlink" title="utf8格式存储json"></a>utf8格式存储json</h4><p>代码如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubannovelPipeline</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">		<span class="keyword">self</span>.file = codecs.open(<span class="string">'douban_novel_utf8.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></div><div class="line">		line = json.dumps(dict(item), ensure_ascii=False) + <span class="string">"\n"</span></div><div class="line">		<span class="keyword">self</span>.file.write(line)</div><div class="line">		<span class="keyword">return</span> item</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></div><div class="line">		<span class="keyword">self</span>.file.close()</div></pre></td></tr></table></figure></p>
<h4 id="随机选择代理"><a href="#随机选择代理" class="headerlink" title="随机选择代理"></a>随机选择代理</h4><p>代码如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubannovelSpiderMiddleware</span>(<span class="title">HttpProxyMiddleware</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, auth_encoding=<span class="string">'latin-1'</span>, proxy_list_file=None)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">proxy_list_file:</span></div><div class="line">            raise NotConfigured</div><div class="line">        <span class="keyword">self</span>.auth_encoding = auth_encoding</div><div class="line">        <span class="comment"># 分别用两个列表维护HTTP和HTTPS的代理</span></div><div class="line">        <span class="keyword">self</span>.proxies = defaultdict(list)</div><div class="line"></div><div class="line">        <span class="comment"># 从json文件中读取代理服务器信息，填入self.proxies</span></div><div class="line">        with open(proxy_list_file) as <span class="symbol">f:</span></div><div class="line">            proxy_list = json.load(f)</div><div class="line">            <span class="keyword">for</span> proxy <span class="keyword">in</span> <span class="symbol">proxy_list:</span></div><div class="line">                scheme = proxy[<span class="string">'proxy_scheme'</span>]</div><div class="line">                url = proxy[<span class="string">'proxy'</span>]</div><div class="line">                <span class="keyword">self</span>.proxies[scheme].append(<span class="keyword">self</span>._get_proxy(url,scheme))</div><div class="line"></div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># 从配置文件中读取用户验证信息编码</span></div><div class="line">        auth_encoding = crawler.settings.get(<span class="string">'HTTPPROXY_AUTH_ENCODING'</span>, <span class="string">'latin-1'</span>)</div><div class="line">        <span class="comment"># 从配置文件中读取代理服务器列表文件(json)的路径</span></div><div class="line">        proxy_list_file = crawler.settings.get(<span class="string">'HTTPPROXY_PROXY_LIST_FILE'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> cls(auth_encoding, proxy_list_file)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></div><div class="line">        spider.logger.info(<span class="string">'Spider opened: %s'</span> % spider.name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_proxy</span><span class="params">(<span class="keyword">self</span>, request, scheme)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># 随机选择一个代理</span></div><div class="line">        creds, proxy = random.choice(<span class="keyword">self</span>.proxies[scheme])</div><div class="line">        request.meta[<span class="string">'proxy'</span>] = proxy</div><div class="line">        <span class="keyword">if</span> <span class="symbol">creds:</span></div><div class="line">            request.headers[<span class="string">'Proxy-Authorization'</span>] = b<span class="string">'Basic'</span> + creds</div></pre></td></tr></table></figure></p>
<h3 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h3><ul>
<li>数据量非常大，大概有10w多条，由于使用没有进行分布式处理也没有挂在服务器上跑，导致电脑被占用了一个下午，心痛。</li>
<li>随机代理无法自动删除无效代理，无法重新下载失败链接，导致失败链接丢失，影响下载质量。</li>
<li>豆瓣页面明明写的20本书！但是部分页面实际只有19本！骗子！过分！！哼！！！</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python动态爬取的两种方式]]></title>
      <url>http://puppetkant.cn/2017/10/20/Python%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>在不断爬取网站的同时，我们会发现有一些页面是动态生成的，无法简单的通过之前的做法获取的所需要的信息。所以我们需要新的爬取解析方式，目前流行的两大思路是<strong>模拟浏览器行为爬取</strong>和<strong>动态页面逆向分析爬取</strong>。</p>
<a id="more"></a>
<h2 id="模拟浏览器行为爬取"><a href="#模拟浏览器行为爬取" class="headerlink" title="模拟浏览器行为爬取"></a>模拟浏览器行为爬取</h2><p>模拟浏览器行为爬取是最简单的方法，适用性也最广。</p>
<h3 id="Selenium与webdriver方式"><a href="#Selenium与webdriver方式" class="headerlink" title="Selenium与webdriver方式"></a>Selenium与webdriver方式</h3><p>这是最广泛的动态爬取方式之一，原因是简单无脑，然而效率感人，非常慢。其中webdriver主要使用PhantomJS，这是基于Webkit的无界面浏览器，能够在不可见的情况下完成浏览器的常用功能。</p>
<p>在使用过程中，如非熟练操作，请认真查阅<a href="http://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Selenium文档</a>和<a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS文档</a>。个人并不建议这种方式，不过如果是小范围的数据爬取可以尝试，比如爬取Instagram特定人物的图片或者<a href="http://puppetkant.cn/2017/08/01/%E5%9B%BD%E5%86%85%E6%90%BA%E7%A8%8B%E4%B8%80%E6%97%A5%E8%88%AA%E7%BA%BFPython%E5%AE%9E%E7%8E%B0/">爬取携程一日航班信息</a>。</p>
<h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><p>除了以上所说的Selenium方式，还有Splash、PyV8、Ghost、execjs等，用法大同小异，只是写法有差异而已，参考查阅官方文档都可以简单应有，这里就不过多复述了。</p>
<h2 id="动态页面逆向分析爬取"><a href="#动态页面逆向分析爬取" class="headerlink" title="动态页面逆向分析爬取"></a>动态页面逆向分析爬取</h2><blockquote>
<p>任何动态产生的内容，要么是本地计算，要么是从服务器获取的。</p>
<p>前者看js，后者抓包。</p>
</blockquote>
<p>爬虫爬取动态页面效率最高的是分析出请求数据的URL<del>熟练运用F12便可以解决</del>，在这里推荐一下网站分析工具<a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a>。</p>
<p>推荐大家可以以<a href="http://www.jianshu.com/search?q=%E6%89%8B%E5%B8%90&amp;page=1&amp;type=note" target="_blank" rel="external">简书的搜索页面</a>和<a href="https://www.bilibili.com/video/av15512174/" target="_blank" rel="external">BiliBili的视频信息页面</a>入手，十分简单易上手。具体代码就不贴了。<del>才不是因为懒</del></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数字杭电模拟登录]]></title>
      <url>http://puppetkant.cn/2017/10/19/%E6%95%B0%E5%AD%97%E6%9D%AD%E7%94%B5%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>这是一个简单的小项目，可以用一句话来简单概括：</p>
<p><strong>模拟登录</strong>数字杭电并<strong>爬取个人成绩</strong>。</p>
<a id="more"></a>
<h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><p>采用urllib包进行数据爬取，http.cookiejar进行cookie保存。</p>
<p>需要注意除了账号和加密后的密码，我们还需要传一个lt值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLt</span><span class="params">()</span>:</span></div><div class="line">    getLtURL = <span class="string">'http://cas.hdu.edu.cn/cas/login?service=http://i.hdu.edu.cn/dcp/index.jsp'</span></div><div class="line">    request = urllib.request.Request(getLtURL)</div><div class="line">    response = urllib.request.urlopen(request)</div><div class="line">    getLtContent = response.read().decode(<span class="string">'utf-8'</span>)</div><div class="line">    getLt = re.search(<span class="string">r'value="(LT-.*?)"'</span>,getLtContent)</div><div class="line"><span class="keyword">return</span> getLt.group(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>同时还有一个ST值在页面跳转的时候需要使用。</p>
<h2 id="爬取个人成绩"><a href="#爬取个人成绩" class="headerlink" title="爬取个人成绩"></a>爬取个人成绩</h2><p>只需要简单的正则匹配就可以了，这个就不多复述了。</p>
<p>最后放上我的代码：<del>因为是随手之作，所以格式混乱，请领会精神</del></p>
<p><a href="https://github.com/PuppetSama/hdu_credit_spider" target="_blank" rel="external">模拟登录数字杭电代码</a></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python爬坑问题集合]]></title>
      <url>http://puppetkant.cn/2017/09/07/Python%E7%88%AC%E5%9D%91%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>本文用于一些常见奇葩问题，致力于记录在 Python 开发过程中出现的各类问题。<br><a id="more"></a></p>
<hr>
<h3 id="1-Sublime-Text-错误-Decode-error-output-not-utf-8"><a href="#1-Sublime-Text-错误-Decode-error-output-not-utf-8" class="headerlink" title="1. Sublime Text 错误[Decode error - output not utf-8]"></a>1. Sublime Text 错误[Decode error - output not utf-8]</h3><blockquote>
<p>打开Python.sublime-build文件,并添加”encoding”:”cp936”这一行,保存即可</p>
</blockquote>
<p>方法来源：<a href="http://blog.csdn.net/wangtaoking1/article/details/41879187" target="_blank" rel="external">http://blog.csdn.net/wangtaoking1/article/details/41879187</a></p>
<h3 id="2-python3安装ssdb-错误importError-cannot-import-name-‘izip-longest’"><a href="#2-python3安装ssdb-错误importError-cannot-import-name-‘izip-longest’" class="headerlink" title="2. python3安装ssdb 错误importError: cannot import name ‘izip_longest’"></a>2. python3安装ssdb 错误importError: cannot import name ‘izip_longest’</h3><blockquote>
<p>itertools.izip在pyhton3中已被去掉了，zip成为内置的方法，返回的是迭代器 iterator， 而在python2 中返回的是列表 list。<br>找到使用了 from itertools import izip_longest 的文件，将 izip_longest 改为 zip_longest。 </p>
</blockquote>
<p>方法来源：<a href="http://blog.csdn.net/a1368783069/article/details/51398625" target="_blank" rel="external">http://blog.csdn.net/a1368783069/article/details/51398625</a></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[国内携程一日航线Python实现]]></title>
      <url>http://puppetkant.cn/2017/08/01/%E5%9B%BD%E5%86%85%E6%90%BA%E7%A8%8B%E4%B8%80%E6%97%A5%E8%88%AA%E7%BA%BFPython%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>这是一个简单的小项目，可以用一句话来简单概括：</p>
<p><strong>爬取携程</strong>当日航班信息<strong>绘制</strong>在<strong>国内地图</strong>上。</p>
<a id="more"></a>
<h2 id="爬取信息"><a href="#爬取信息" class="headerlink" title="爬取信息"></a>爬取信息</h2><p>这里我采用的是Scrapy框架+Selenium动态爬取。</p>
<p>并没有什么可以需要注意的地方，不过有一点需要提醒一下。当使用chromedriver时，若是报错</p>
<blockquote>
<p>chromedriver executable needs to be in PATH</p>
</blockquote>
<p>可以采用以下三种方法解决：</p>
<ul>
<li><p>在环境变量中加入chromedriver位置</p>
</li>
<li><p>将代码改为</p>
</li>
</ul>
<p><code>driver = webdriver.Chrome(&#39;C:/path/to/chromedriver.exe&#39;)</code></p>
<ul>
<li>将chromedriver放置于目标位置，Linux为<code>/usr/bin/</code>，Windows为<code>PythonXX/Scripts/</code></li>
</ul>
<h2 id="绘制地图"><a href="#绘制地图" class="headerlink" title="绘制地图"></a>绘制地图</h2><p>绘制地图使用的是Basemap包，而Basemap基于2.7，即正常情况下无法使用。<br>通过<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">Python Extension Packages for Windows</a>可得到基于Py3的Basemap Package。</p>
<p>为了得到中国省份边界，可以通过<a href="http://www.gadm.org/" target="_blank" rel="external">GADM</a>获取数据，然后通过readshapefile()方法加载数据。</p>
<h2 id="绘制航线"><a href="#绘制航线" class="headerlink" title="绘制航线"></a>绘制航线</h2><p>将地点与经纬度以字典方式传入<code>{&#39;city&#39;，[lon， lat]}</code>,根据获得数据用drawgreatcircle()进行绘制。</p>
<p>最后得到目标图片：</p>
<p><img src="http://omjz7so35.bkt.clouddn.com/OF_FFSB%295%5DTK$E34%602S6%29FU.png" alt="AirLine"></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[思考的独立性]]></title>
      <url>http://puppetkant.cn/2017/06/28/%E6%80%9D%E8%80%83%E7%9A%84%E7%8B%AC%E7%AB%8B%E6%80%A7/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>最近一直在思考一个比较有趣的问题，这个问题就是“怎么保证自己的思想是独立的”，这样说或许有些太过空大，那么从小的方面来讲，“你所认为的真的是你所认为的么？”</p>
<a id="more"></a>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>大概是一两年前吧，看到了一本书《虚无的十字架》，当时觉得“哇，真是好说，死刑应当存在，哪怕只是用来震慑。”然后在和别讨论是否应该废除死刑的时候就直接回一句“不知你看过《虚无的十字架》没？”后来又意识到“处罚过于严厉，反而会使人铤而走险，而执行才是真正的解决之法”，比如抢劫会被判死刑的话，抢劫者自然会减少，然而杀人劫财的事件必定会大大增加。假如只要进行犯罪必定会被抓住处罚，那么犯罪事件必定减少。那么，这和我支持死刑是不是有一些冲突呢？既然惩罚不在于重，而在于严，为什么还要支持死刑呢？看到别人的观点，是是是，拿来即用，那到底是不是你的想法呢？</p>
<h2 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h2><p>然后平时查资料、写博客的时候，总会发现一些相同的文章，授权转载啦，侵犯版权啦一目了然。但是有一些相似的文章，这个时候有些人说是洗稿，有说借鉴。但是对于自己看来，明明是实质相同，为什么要拿来浪费他人的时间呢？我在写博客时，也是经常犯这样的错误。哇！这个东西很不错，学一下好啦，顺便写一篇博客吧。咦？还是要向其他人学习一个，接受一下人生经验。哦，对对对，是是是，有道理。然后写着写着发现和其他人并无不同。过几天就直接忘掉了。那么，我之前真的有在独立思考么？</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>那么如何保持独立地思考呢？<br>我个人认为是不打扰，就是保证自己短时间内在这一方面不受到外界影响，比如你要写一篇关于某项技术的博客，你可以先去查阅资料丰富自己，等过个三两天之后再开始写。<br>或者你已经强大到不会受到他人影响，比如你对这项技术已经有了很深刻的见解，已经明白自己要说什么，只是缺少一些论据之类的，自然可以随意看他人的观点。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所谓独立的思考，本质上其实并不存在。我们所接受的一起知识都源自于他人，但是相对独立我们还是可以做到的，在你自我意识比较薄弱的时候，独立思考需要不被打扰，而当你学识比较强的时候，自然就可以博采众家了。突然想到某人的一句话</p>
<blockquote>
<p>这东西我不懂，你说什么我没办法反驳你。但是这个我明明懂，那我就要和你刚了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 爬虫笔记（三）——对于Lambda的认识]]></title>
      <url>http://puppetkant.cn/2017/05/09/Python-%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%AF%B9%E4%BA%8ELambda%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>在一些Python优秀项目中总是能看到Lambda的影子，但自己在实际编程过程中并没有用到过，所以决定学习一下。</p>
<a id="more"></a>
<h2 id="Anonymous"><a href="#Anonymous" class="headerlink" title="Anonymous"></a>Anonymous</h2><blockquote>
<p>The Python lambda statement is an anonymous or unbound function and a pretty limited function at that.</p>
</blockquote>
<p>首先来说，lambda函数通常被称之为匿名函数，那么大家估计对于lambda的基本用法就有了一个大致轮廓。</p>
<p>通常是在需要一个只用一次的函数，又不想费神去命名一个函数的场合下使用，这也是大多数人认为lambda是一个语法糖的原因。</p>
<p>举个例子，将一个<code>list</code>里的每个元素都进行平方：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>（<span class="built_in">lambda</span> x:x*x, [y <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</div></pre></td></tr></table></figure>
<p>可以看出，<code>lambda x:x*x</code>实际上是：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span></span><span class="symbol">:</span></div><div class="line">    <span class="keyword">return</span> x*x</div></pre></td></tr></table></figure>
<p>然而，和其他很多语言相比，Python 的 lambda 限制多多，最严重的当属它只能由一条表达式组成。这个限制主要是为了防止滥用，因为当人们发觉 lambda 很方便，就比较容易滥用，可是用多了会让程序看起来不那么清晰，毕竟每个人对于抽象层级的忍耐 / 理解程度都有所不同。</p>
<h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><blockquote>
<p>A closure—unlike a plain function pointer —allows a function to access those non-local variables even when invoked outside of its immediate lexical scope.</p>
</blockquote>
<p>闭包是指将当前作用域中的变量通过值或者引用的方式封装到lambda表达式当中，成为表达式的一部分，它使你的lambda表达式从一个普通的函数变成了一个带隐藏参数的函数。</p>
<p>我们可以粗暴地理解为<strong>闭包就是一个定义在函数内部的函数</strong>，闭包使得变量即脱离了该函数作用域范围也依然能被访问到。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x:x+n</div><div class="line"></div><div class="line">f_1 = f(<span class="number">1</span>)</div><div class="line">print(f_1(<span class="number">2</span>))</div></pre></td></tr></table></figure>
<p>得到结果为<code>3</code></p>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>对于Python来说，省名字和写到一行是次要的，重点在于嵌入到表达式里面。</p>
<p>lambda的使用大量简化了代码，使代码简练清晰。但是值得注意的是，这会在一定程度上降低代码的可读性。</p>
<p>lambda 并不会带来程序运行效率的提高，只会使代码更简洁。</p>
<p>如果使用lambda，lambda内不要包含循环，如果有，为了使代码获得可重用性和更好的可读性，还是应该选择自定义函数。</p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 爬虫笔记（二）——编码转换与错误处理]]></title>
      <url>http://puppetkant.cn/2017/04/11/Python-%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>在日常的Python学习中总是会遇到关于编码转换的问题。</p>
<a id="more"></a>
<h2 id="Python-文件中的编码"><a href="#Python-文件中的编码" class="headerlink" title="Python 文件中的编码"></a>Python 文件中的编码</h2><p>Python 默认脚本文件都是 <code>ANSSII</code> 编码的，当文件中有非 <code>ANSSII</code> 编码范围内的字符是要在第一行或第二行指定编码声明： <code># -*- coding=utf-8 -*-</code> 或者 <code>#coding=utf-8</code>，其他编码如：gbk、gb2312也可以；否则会出现</p>
<blockquote>
<p>SyntaxError: Non-ASCII character ‘\xe4’ in file test.py on line 3, but no encoding declared; see <a href="http://www.python.org/peps/pep-0263.html" target="_blank" rel="external">http://www.python.org/peps/pep-0263.html</a> for details</p>
</blockquote>
<h2 id="Python-2-X-的字符编码设计逻辑"><a href="#Python-2-X-的字符编码设计逻辑" class="headerlink" title="Python 2.X 的字符编码设计逻辑"></a>Python 2.X 的字符编码设计逻辑</h2><p>Python 2.X 中字符串类型主要有两大类： <code>str</code> 和 <code>unicode</code>, 他们都是 basestring 的派生类；</p>
<ul>
<li>str 是某种编码（UTF-8，GBK等）类型的字符串 </li>
<li>unicode 是Unicode类型的字符串</li>
</ul>
<p>在str的文档中有这样的一句话：</p>
<blockquote>
<p>The string data type is also used to represent arrays of bytes, e.g., to hold data read from a file.</p>
</blockquote>
<p>也就是说在读取一个文件的内容，或者从网络上读取到内容时，保持的对象为str类型；如果想把一个str转换成特定编码类型，需要把str转为Unicode,然后从unicode转为特定的编码类型如：utf-8、gb2312等。</p>
<h2 id="python-编码转换函数"><a href="#python-编码转换函数" class="headerlink" title="python 编码转换函数"></a>python 编码转换函数</h2><p>通过Python的官方手册我们能够找到：</p>
<h3 id="str-decode-函数："><a href="#str-decode-函数：" class="headerlink" title="str.decode 函数："></a>str.decode 函数：</h3><blockquote>
<p>str.decode([encoding[, errors]])</p>
<p>Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding. errors may be given to set a different error handling scheme. The default is ‘strict’, meaning that encoding errors raise UnicodeError. Other possible values are ‘ignore’, ‘replace’ and any other name registered via codecs.register_error(), see section Codec Base Classes.</p>
<p>New in version 2.2.</p>
<p>Changed in version 2.3: Support for other error handling schemes added.</p>
<p>Changed in version 2.7: Support for keyword arguments added.</p>
</blockquote>
<h3 id="str-encode-函数："><a href="#str-encode-函数：" class="headerlink" title="str.encode 函数："></a>str.encode 函数：</h3><blockquote>
<p>str.encode([encoding[, errors]])</p>
<p>Return an encoded version of the string. Default encoding is the current default string encoding. errors may be given to set a different error handling scheme. The default for errors is ‘strict’, meaning that encoding errors raise a UnicodeError. Other possible values are ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ and any other name registered via codecs.register_error(), see section Codec Base Classes. For a list of possible encodings, see section Standard Encodings.</p>
<p>New in version 2.0.</p>
<p>Changed in version 2.3: Support for ‘xmlcharrefreplace’ and ‘backslashreplace’ and other error handling schemes added.</p>
<p>Changed in version 2.7: Support for keyword arguments added.</p>
</blockquote>
<p>在实际开发中，我们常常会遇到这种问题：</p>
<blockquote>
<p>UnicodeDecodeError: ‘gbk’ codec can’t decode bytes in position 30664-30665: illegal multibyte sequence</p>
</blockquote>
<p>此类问题中，虽然已经获得了正确的unicode字符串了，但是由于此unicode字符串中包含了一个特殊字符。而此特殊字符，GBK字符集中没有，不存在，所以无法将对应的Unicode字符，编码为对应的GBK字符，所以出现UnicodeEncodeError，更无法打印出来。</p>
<p>如果对于这些特殊字符，你不是很关心，即使不显示也无所谓，但是希望剩下的，其他大多数的正常的字符都能显示。</p>
<p>即，忽略掉特殊字符，显示哪些能显示的字符， 那么可以改为：<br><code>s.decode(&#39;gbk&#39;, ‘ignore&#39;).encode(&#39;utf-8′)</code></p>
<p>如上面的函数说明，因为decode的函数原型是 <code>decode([encoding], [errors=’strict’])</code>，可以用第二个参数控制错误处理的策略，默认的参数就是strict，代表遇到非法字符时抛出异常；</p>
<ul>
<li>如果设置为ignore，则会忽略非法字符；</li>
<li>如果设置为replace，则会用?取代非法字符；</li>
<li>如果设置为xmlcharrefreplace，则使用XML的字符引用。</li>
</ul>
<h2 id="Python编码检测"><a href="#Python编码检测" class="headerlink" title="Python编码检测"></a>Python编码检测</h2><p>在使用Python抓取网页并进行分析时出现这个错误:</p>
<blockquote>
<p>UnicodeDecodeError: ‘utf8’ codec can’t decode byte 0xd6</p>
</blockquote>
<p>原因是部分中文网站编码不是utf8, 因此需要进行编码判断</p>
<p>在引入编码自动识别前, 我们有两种途径获取网页的编码信息:</p>
<p>其一、通过服务器返回的 header 里的 charset 变量获取</p>
<p>其二、通过页面里的 meta 信息获取</p>
<p>正常情况下, 如果服务器或者页面有提供这两个参数, 而且参数是正确的, 那我们抓取网页时就不存在编码的问题了.</p>
<p>但是现实总是会难为我们这些程序员, 抓取网页时, 经常会出现以下几种情况:</p>
<ol>
<li>这两个参数缺失了</li>
<li>这两个参数虽然都提供了，但是不一致</li>
<li>这两个参数提供了，但是与网页实际的编码不一致</li>
</ol>
<p>为了尽可能的自动的获取所有网页的编码，所以引入了编码自动识别</p>
<p>使用 <code>chardet</code> 可以很方便的实现字符串/文件的编码检测,例子如下:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">url = 'https://mm.taobao.com/json/request_top_list.htm?page=1'</div><div class="line">headers = &#123;</div><div class="line">  'User-Agent': 'Mozilla/5.0 (Windows NT 5.1; rv:10.0.1) Gecko/20100101 Firefox/10.0.1',</div><div class="line">&#125;</div><div class="line">request = urllib2.Request(url, headers = headers)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">print(chardet.detect(response.read()))</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<pre><code>{&#39;confidence&#39;: 0.99, &#39;encoding&#39;: &#39;GB2312&#39;}
</code></pre><h2 id="其他中文乱码问题"><a href="#其他中文乱码问题" class="headerlink" title="其他中文乱码问题"></a>其他中文乱码问题</h2><p>有时候，文本成功显示，但中文部分乱码，一般有两种可能：</p>
<h3 id="decode转码问题"><a href="#decode转码问题" class="headerlink" title="decode转码问题"></a>decode转码问题</h3><p>目标文件或者目标网站的编码格式是否为自己输入的编码格式？另，如果gb2312的编码，使用decode转时出错，可以使用decode(‘gbk’)这个字符集来解决</p>
<h3 id="encode转码问题"><a href="#encode转码问题" class="headerlink" title="encode转码问题"></a>encode转码问题</h3><p>将<code>unicode</code>转码成 ‘utf-8’格式时，在dos命令行中，会出现中文乱码情况，是因为dos命令行的编码格式为’gb2312’，此时将<code>unicode</code>转码成’gbk’格式即可。</p>
<p>参考于：</p>
<blockquote>
<p><a href="http://www.jianshu.com/p/53bb448fe85b#" target="_blank" rel="external">http://www.jianshu.com/p/53bb448fe85b#</a><br><a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/" target="_blank" rel="external">http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/</a><br><a href="http://zoeyyoung.github.io/python-chardet.html" target="_blank" rel="external">http://zoeyyoung.github.io/python-chardet.html</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 爬虫笔记（一）————正则表达式]]></title>
      <url>http://puppetkant.cn/2017/04/09/Python-%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>最近发现自己在编程方面始终是知其然，而不知其所以然，于是决定重新认真学习一遍。本篇文章意在于自我查阅，如果能够帮到他人真是幸事。</p>
<p>这里将会整理一下Python的re模块，即正则表达式的用法。</p>
<a id="more"></a>
<h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><p>正则表达式是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符。模式描述在搜索文本时要匹配的一个或多个字符串。</p>
<h3 id="正则表达式修饰符-可选标志"><a href="#正则表达式修饰符-可选标志" class="headerlink" title="正则表达式修饰符 - 可选标志"></a>正则表达式修饰符 - 可选标志</h3><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>模式</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>re.I</td>
<td>使匹配对大小写不敏感</td>
</tr>
<tr>
<td>re.L</td>
<td>做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td>re.M</td>
<td>多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td>re.S</td>
<td>使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td>re.U</td>
<td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td>re.X</td>
<td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><p>模式字符串使用特殊的语法来表示一个正则表达式：</p>
<p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p>
<p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p>
<p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p>
<p>反斜杠本身需要使用反斜杠转义。</p>
<p>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r’/t’，等价于’//t’)匹配相应的特殊字符。</p>
<p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>模式</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>匹配字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的末尾。</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td>[…]</td>
<td>用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td><sup><a href="#fn_..." id="reffn_...">...</a></sup></td>
<td>不在[]中的字符：<sup><a href="#fn_abc" id="reffn_abc">abc</a></sup> 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td>re*</td>
<td>匹配0个或多个的表达式。</td>
</tr>
<tr>
<td>re+</td>
<td>匹配1个或多个的表达式。</td>
</tr>
<tr>
<td>re?</td>
<td>匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td>re{ n}</td>
<td></td>
</tr>
<tr>
<td>re{ n,}</td>
<td>精确匹配n个前面表达式。</td>
</tr>
<tr>
<td>re{ n, m}</td>
<td>匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td>a&brvbar;b</td>
<td>匹配a或b</td>
</tr>
<tr>
<td>(re)</td>
<td>G匹配括号内的表达式，也表示一个组</td>
</tr>
<tr>
<td>(?imx)</td>
<td>正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr>
<td>(?-imx)</td>
<td>正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr>
<td>(?: re)</td>
<td>类似 (…), 但是不表示一个组</td>
</tr>
<tr>
<td>(?imx: re)</td>
<td>在括号中使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td>(?-imx: re)</td>
<td>在括号中不使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td>(?#…)</td>
<td>注释.</td>
</tr>
<tr>
<td>(?= re)</td>
<td>前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr>
<td>(?! re)</td>
<td>前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</td>
</tr>
<tr>
<td>(?&gt; re)</td>
<td>匹配的独立模式，省去回溯。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母数字及下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母数字及下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白字符，等价于 [\t\n\r\f].</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意非空字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任意数字，等价于 [0-9].</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr>
<td>\z</td>
<td>匹配字符串结束</td>
</tr>
<tr>
<td>\G</td>
<td>匹配最后匹配完成的位置。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td>\n, \t, 等.</td>
<td>匹配一个换行符。匹配一个制表符。等</td>
</tr>
<tr>
<td>\1…\9</td>
<td>匹配第n个分组的子表达式。</td>
</tr>
<tr>
<td>\10</td>
<td>匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="常用的正则表达式处理函数"><a href="#常用的正则表达式处理函数" class="headerlink" title="常用的正则表达式处理函数"></a>常用的正则表达式处理函数</h2><h3 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h3><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<p><strong>函数语法：</strong></p>
<pre><code>re.match(pattern, string, flags=0)
</code></pre><p>函数参数说明：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>string</td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td>flags</td>
<td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>
</tr>
</tbody>
</table>
</div>
<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">name=<span class="string">"Hello,My name is kuangl,nice to meet you..."</span></div><div class="line">k=re.match(<span class="string">r"(\H....)"</span>,name)</div><div class="line"><span class="keyword">if</span> k:</div><div class="line">     <span class="keyword">print</span> k.group(<span class="number">0</span>),<span class="string">'\n'</span>,k.group(<span class="number">1</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Sorry,not match!"</span></div></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Hello</span></div><div class="line"><span class="attribute">Hello</span></div></pre></td></tr></table></figure>
<h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h3><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p><strong>函数语法：</strong></p>
<pre><code>re.search(pattern, string, flags=0)
</code></pre><p>函数参数说明：</p>
<p>如上</p>
<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">name=<span class="string">"Hello,My name is kuangl,nice to meet you..."</span></div><div class="line">k=re.search(<span class="string">r'k(uan)gl'</span>,name)</div><div class="line"><span class="keyword">if</span> k:</div><div class="line">    <span class="keyword">print</span> k.group(<span class="number">0</span>),k.group(<span class="number">1</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Sorry,not search!"</span></div></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">kuangl uan</span></div></pre></td></tr></table></figure>
<h3 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h3><p>re.findall 在目标字符串查找符合规则的字符串。</p>
<p><strong>函数语法：</strong></p>
<pre><code>re.findall(pattern, string, flags=0)
</code></pre><p>函数参数说明：</p>
<p>如上</p>
<p>匹配成功re.findall方法返回由匹配的对象组成的列表，否则返回None。</p>
<p>实例：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mail=<span class="string">'&lt;user01@mail.com&gt; &lt;user02@mail.com&gt; user04@mail.com'</span></div><div class="line">re.findall(<span class="string">r'(\w+@m....[a-z]&#123;3&#125;)'</span>,mail)</div></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'user01@mail.com</span>', <span class="symbol">'user02@mail.com</span>', <span class="symbol">'user04@mail.com</span>']</div></pre></td></tr></table></figure>
<h3 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h3><p>re.sub 用于替换字符串的匹配项。</p>
<p><strong>函数语法：</strong></p>
<pre><code>re.sub(pattern, repl, string, count=0)
</code></pre><p>函数参数说明：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>repl</td>
<td>替换后的字符串。</td>
</tr>
<tr>
<td>string</td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td>count</td>
<td>替换个数。默认为0，表示每个匹配项都替换。</td>
</tr>
</tbody>
</table>
</div>
<p>替换成功re.sub方法返回一个替换后的对象，否则返回原字符串。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">phone = <span class="string">"2004-959-559 # 这是一个国外电话号码"</span></div><div class="line"></div><div class="line">num = re.sub(<span class="string">r'#.*$'</span>, <span class="string">""</span>, phone)</div><div class="line"><span class="keyword">print</span> <span class="string">"电话号码是: "</span>, num</div><div class="line"></div><div class="line">num = re.sub(<span class="string">r'\D'</span>, <span class="string">""</span>, phone)</div><div class="line"><span class="keyword">print</span> <span class="string">"电话号码是 : "</span>, num</div><div class="line"></div><div class="line">num = re.sub(<span class="string">r'3'</span>, <span class="string">""</span>, phone)</div><div class="line"><span class="keyword">print</span> <span class="string">"电话号码是 : "</span>, num</div></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">电话号码是:  2004<span class="string">-959</span><span class="string">-559</span> </div><div class="line">电话号码是 :  2004959559</div><div class="line">电话号码是 :  2004<span class="string">-959</span><span class="string">-559</span> # 这是一个国外电话号码</div></pre></td></tr></table></figure>
<h3 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h3><p>re.split 用于来分割字符串。</p>
<p><strong>函数语法：</strong></p>
<pre><code>re.split(pattern, string, maxsplit=0)
</code></pre><p>函数参数说明：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>string</td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td>count</td>
<td>最大分割字符串，默认为0，表示每个匹配项都分割。</td>
</tr>
</tbody>
</table>
</div>
<p>分割成功re.split方法返回一个分割后的对象组成的列表，否则返回由原字符串组成的列表。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">test=<span class="string">"Hi, nice to meet you where are you from?"</span></div><div class="line"></div><div class="line">a = re.split(<span class="string">r"\s+"</span>,test)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = re.split(<span class="string">r"\s+"</span>,test,<span class="number">3</span>)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = re.split(<span class="string">r"|"</span>,test,<span class="number">3</span>)</div><div class="line">print(a)</div></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'Hi</span>,', <span class="symbol">'nice</span>', <span class="symbol">'to</span>', <span class="symbol">'meet</span>', <span class="symbol">'you</span>', <span class="symbol">'where</span>', <span class="symbol">'are</span>', <span class="symbol">'you</span>', <span class="symbol">'from?</span>']</div><div class="line">[<span class="symbol">'Hi</span>,', <span class="symbol">'nice</span>', <span class="symbol">'to</span>', <span class="symbol">'meet</span> you where are you from?']</div><div class="line">[<span class="symbol">'Hi</span>, nice to meet you where are you from?']</div></pre></td></tr></table></figure>
<h3 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h3><p>re.compile 可以把正则表达式编译成一个正则对象。</p>
<p><strong>函数语法：</strong></p>
<pre><code>re.compile(pattern, flags=0)
</code></pre><p>函数参数说明：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>flags</td>
<td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>
</tr>
</tbody>
</table>
</div>
<p>re.compile方法返回一个正则对象。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">test=<span class="string">"Hi, nice to meet you where are you from?"</span></div><div class="line">k=re.compile(<span class="string">r'\w*o\w*'</span>) <span class="comment">#匹配带o的字符串</span></div><div class="line"><span class="keyword">print</span> k.findall(test)     <span class="comment">#显示所有包涵o的字符串</span></div><div class="line"><span class="keyword">print</span> k.sub(<span class="keyword">lambda</span> m: <span class="string">'['</span> + m.group(<span class="number">0</span>) + <span class="string">']'</span>,test)  <span class="comment"># 将字符串中含有o的单词用[]括起来</span></div></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'to'</span>, <span class="string">'you'</span>, <span class="string">'you'</span>, <span class="string">'from'</span>]</div><div class="line"><span class="symbol">Hi</span>, nice [to] meet [you] where are [you] [from]?</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android爬坑问题集合]]></title>
      <url>http://puppetkant.cn/2017/03/19/Android%E7%88%AC%E5%9D%91%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>本文用于一些常见奇葩问题，致力于记录在 Android 开发过程中出现的各类问题。<br><a id="more"></a></p>
<hr>
<h3 id="1-Installation-failed-with-message-Failed-to-establish-session"><a href="#1-Installation-failed-with-message-Failed-to-establish-session" class="headerlink" title="1. Installation failed with message Failed to establish session"></a>1. Installation failed with message Failed to establish session</h3><p>小米手机在用 Android Studio 运行程序时报错，错误信息为</p>
<blockquote>
<p>“Installation failed with message Failed to establish session”</p>
</blockquote>
<p>仅需在开发者选项中将 MIUI 优化 关掉即可。</p>
<h3 id="2-无法成功实例化-NavigationView-中的-MenuItem-问题"><a href="#2-无法成功实例化-NavigationView-中的-MenuItem-问题" class="headerlink" title="2. 无法成功实例化 NavigationView 中的 MenuItem 问题"></a>2. 无法成功实例化 NavigationView 中的 MenuItem 问题</h3><p>在开发过程中，我需要在侧栏显示位置信息，结果 setTittle() 方法一直失效，最后发现是没有成功实例化目标 MenuItem。目标 Item 的实例化不应该采用以下形式</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">    <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">    getMenuInflater().inflate(R.menu.drawer, menu);</div><div class="line">    mSelectSchool = menu.findItem(R.id.university_choose);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而应该是</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">NavigationView mNavigationView</span> = (NavigationView) findViewById(R.id.navigation_view);</div><div class="line"><span class="attribute">mSelectSchool</span> = mNavigationView.getMenu().findItem(R.id.university_choose);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7 MC服务器搭建爬坑指南]]></title>
      <url>http://puppetkant.cn/2017/03/09/CentOS7-MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%88%AC%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>VPS系统为CentOS 7</p>
<h3 id="首先更新系统"><a href="#首先更新系统" class="headerlink" title="首先更新系统"></a>首先更新系统</h3><p><code><br>    yum -y update<br>    yum -y upgrade
</code><br><a id="more"></a></p>
<h3 id="安装配置JAVA"><a href="#安装配置JAVA" class="headerlink" title="安装配置JAVA"></a>安装配置JAVA</h3><p>首先，MC需要JAVA环境。由于服务器是纯文本界面，在服务器上安装JAVA环境时选择本地下载JAVA的RPM安装包，然后通过xftp上传至服务器，在服务器进行安装。</p>
<p>JAVA环境设置这里就不再多提，不懂的话，可以自行去网上搜索。</p>
<h3 id="MC服务端下载"><a href="#MC服务端下载" class="headerlink" title="MC服务端下载"></a>MC服务端下载</h3><p>首先，我们需要下载MC的服务端文件。我选择了Cauldron（原MCPC+，可安装Mod）1.7.10版本。</p>
<p>下载<a href="https://sourceforge.net/projects/cauldron-unofficial/files/1.7.10/" target="_blank" rel="external">服务器文件</a>,下载libraries文件即可，如图：<br><img src="http://omjz7so35.bkt.clouddn.com/mc-2-1-1.png" alt="Alt text"></p>
<p>下载好后，将libraries文件夹解压，将解压出来的文件上传到服务器。我上传到了“/home/mcserver”这个文件夹下，mcserver这个文件夹需要自己创建。<br><img src="http://omjz7so35.bkt.clouddn.com/blog/mc/mc-2-1-2.png" alt="Alt text"></p>
<h3 id="MC服务器设置"><a href="#MC服务器设置" class="headerlink" title="MC服务器设置"></a>MC服务器设置</h3><p>现在回到Putty，我们需要在服务器中安装一个工具：Screen。</p>
<p>首先我们在命令行中执行：</p>
<pre><code>yum -y install screen
</code></pre><p>然后，创建一个新的Screen，命名为mc，用于启动管理MC服务器：</p>
<pre><code>screen -S mc
</code></pre><p>然后切换到mcserver目录，建立启动脚本文件：</p>
<pre><code>nano start.sh
</code></pre><p>新建start.sh文件，弹出编辑器窗口，粘贴内容如下：</p>
<pre><code>#!/bin/sh         
java -Xmx768M -Xms512M -jar /home/mcserver/minecraft_server.1.7.10.jar   
</code></pre><p>其中的minecraft_server.1.7.10.jar为你的服务器文件，即当前目录下你上传的server.jar文件名。 </p>
<p>按Ctrl + X退出，输入Y确定保存，然后回车。</p>
<p>执行命令，赋予脚本执行权限</p>
<pre><code>chmod 777 start.sh
</code></pre><p>修改EULA文件，在命令行输入：</p>
<pre><code>nano eula.txt
</code></pre><p>将eula=false改为eula=true</p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>在启动服务器之前有一点需要注意，一般来说，Linux的安全组设置为仅开放22端口，而MC服务器所需端口号为25565，我们需要映射端口或者选择开放25565端口。</p>
<p>之后，运行启动脚本启动MC服务器：</p>
<pre><code>sh ./start.sh
</code></pre><p>接下来，还有非常重要的一步：</p>
<p>要想让非正版客户端也可以连接服务器，还需要设置一下server.properties文件。</p>
<p>首先Ctrl + C 停止MC服务器</p>
<p>命令行输入：</p>
<pre><code>nano server.properties
</code></pre><p>将</p>
<pre><code>online-mode=true
</code></pre><p>改为</p>
<pre><code>online-mode=false
</code></pre><p>保存后重新运行服务器。</p>
<p>搞定XD</p>
<p>下次我们使用Putty连接服务器时，只要使用命令：</p>
<pre><code>screen -r mc
</code></pre><p>即可回到我们的MC服务器状态啦。</p>
<h3 id="服务器mod安装"><a href="#服务器mod安装" class="headerlink" title="服务器mod安装"></a>服务器mod安装</h3><p>如果想手动添加mod服务,那么需要手动下载服务器文件下载 里边的cauldron-1.7.10-1.1388.1.0-server.jar (注意和你下载的libraries的版本要相同),然后放到服务器mc目录下,修改启动脚本 start.sh为:<br><code></code></p>
<pre><code>#!/bin/sh
java -Xmx768M -Xms512M -jar /home/mcserver/cauldron-1.7.10-1.1388.1.0-server.jar
</code></pre><p>&lt;/code&gt;<br>就可以了。</p>
<p>这个时候不要去想，mod到底安装在哪里，先重新启动服务器：</p>
<pre><code>sh ./start.sh
</code></pre><p>然后就会在mcserver目录下出现/mods。将希望添加的mod放进去就可以了。</p>
<h3 id="客户端mod安装"><a href="#客户端mod安装" class="headerlink" title="客户端mod安装"></a>客户端mod安装</h3><p>安装mod请从官网下载，这样可以确保mod的纯净性和可用性。</p>
<p>安装前需要先安装forge，不要试图绕过他，除非你要玩原生版。</p>
<blockquote>
<p>参考于Sinton’s Blog <a href="https://sintonwong.github.io" target="_blank" rel="external">https://sintonwong.github.io</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Game </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[happy-new-year]]></title>
      <url>http://puppetkant.cn/2016/12/31/happy-new-year/</url>
      <content type="html"><![CDATA[<p>今年是第一年开始写年终总结。对于过去的一年稍稍进行一下总结回顾，再对明年制定一些目标。<br><a id="more"></a></p>
<h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><p>2016年嘛，依旧是喊着“要努力，要上进”然后疯狂蹉跎。依旧是那个不喜欢的自己，很遗憾，没有变得更好。不过嘛，2016年还是做了一些有意义的事情的。</p>
<ul>
<li><p>和朋友参加服务外包省赛，虽然只是拿到了三等奖，自己也是在全程划水，然而认识到他们真的很开心。</p>
</li>
<li><p>去考驾照，由于报名比较晚，还没有考完，不过在这件事上发现其实“恐惧的只是恐惧本身而已。”</p>
</li>
<li><p>真正意义上的协同合作，虽然只是课程设计，但是还是学到了很多。</p>
</li>
</ul>
<p>今年值得一提的好像只有这些。还有就是，遇到了彩虹，才知道原来人类可以如此美好。希望自己能够有勇气去与之交流。</p>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p>接下来呢，要说一下2017年的展望了。毕竟明年的年终总结全靠今年的目标来凑数了。自己曾经列举过25岁前想要完成的事情，那么，现在总要县完成一些嘛。</p>
<h3 id="成为一名优秀的工程师"><a href="#成为一名优秀的工程师" class="headerlink" title="成为一名优秀的工程师"></a>成为一名优秀的工程师</h3><ul>
<li><p>每个月都要在Blog上写一篇文章</p>
</li>
<li><p>作出一个让自己满意的项目</p>
</li>
<li><p>去即刻实习</p>
</li>
</ul>
<h3 id="我不是画家，我只是一个兴趣始然的画手"><a href="#我不是画家，我只是一个兴趣始然的画手" class="headerlink" title="我不是画家，我只是一个兴趣始然的画手"></a>我不是画家，我只是一个兴趣始然的画手</h3><ul>
<li><p>学习人体、透视、色彩等等</p>
</li>
<li><p>在半次元或者pixiv发布自己的作品</p>
</li>
<li><p>为一首歌画pv</p>
</li>
</ul>
<h3 id="我不停地追寻，只是想要找到自己"><a href="#我不停地追寻，只是想要找到自己" class="headerlink" title="我不停地追寻，只是想要找到自己"></a>我不停地追寻，只是想要找到自己</h3><ul>
<li><p>健身，增重，目标120</p>
</li>
<li><p>阅读，一年的话，50本好了，<del>感觉有点多</del>，题材不限</p>
</li>
<li><p>情感，<del>如果还是无来由地喜欢她的话，就去表白</del> 表白失败</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
